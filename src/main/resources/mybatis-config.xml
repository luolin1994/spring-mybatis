<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1.properties：引入外部的properties文件
              resource:引入类路径下的资源
              url:引入网络路径或磁盘路径下的资源

     -->

    <properties resource="jdbc.properties"></properties>

    <settings>

        <!--显示地指定每个我们需要更改的配置的值，即使是默认的，防止版本更新带来的问题-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        
<!--        <setting name="logImpl" value="STDOUT_LOGGING"/>-->
    </settings>

    <!--别名处理器，可以为java类型起别名 , 别名不区分大小写-->
    <typeAliases>
        <!--type:指定要起别名的类型全类名，默认为类名小写,user -->
<!--        <typeAlias type="cn.itcast.travel.bean.User" alias="user"></typeAlias>-->

        <!-- package:为某个包下的所有类批量起别名
             name:指定包名，为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写）-->
        <package name="cn.itcast.travel.bean"/>
        <!--在批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->
    </typeAliases>

    <!--enviroments:环境们，可以配置多种环境，default指定使用某种环境，达到快速切换的目的
           enviroment:配置一个具体的环境，id表示当前环境的唯一标识
                transactionManager：事务管理器的类型 JDBC/MANAGED
                                    自定义事务管理器的类型：实现TransactionFactory的接口，.type为其别名
                 dataSource:数据源 [UNPOOLED|POOLED|JNDI]
                            自定义，实现接口DataSourceFactory
           -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- databaseIdProvider :支持多数据库厂商
          type="DB_VENDOR"   ：VendorDatabaseIdProvider.class
                 作用是得到数据库厂商的标识（驱动getDatabaseProductName()，使得mybatis能够识别）-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle" />

    </databaseIdProvider>

    <!--mappers:将sql映射注册到全局配置中
            mapper:注册一个sql映射
                 resource:引用类路径下的sql映射文件
                 url:引用网络路径或磁盘路径下的sql映射  file:///var/mappers/AuthorMapper.xml
                 class: 引用接口(引用)
                           1. 有sql映射文件，映射文件名必须和接口同名，并且放在接口的同一目录下,为了工程看上去规律，在resources中加入相同的目录
                           2. 没有sql映射文件，所有的sql都是利用注解写在接口上
                           推荐：比较重要的，复杂的Dao接口写sql映射文件
                                 不重要的，简单的为了开发简便可以使用注解-->
    <mappers>
<!--        <mapper resource="mybatis/mapper/UserMapper.xml"/>-->
<!--        <mapper class="cn.itcast.travel.dao.UserMapperAnnotaion"/>-->

        <!--批量注册,注意映射文件也要放在其中-->
        <package name="cn.itcast.travel.dao"/>
    </mappers>
</configuration>